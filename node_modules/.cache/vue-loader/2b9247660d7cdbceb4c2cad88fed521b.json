{"remainingRequest":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/src/components/MosaicChart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/src/components/MosaicChart.vue","mtime":1618825775772},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/css-loader/dist/cjs.js","mtime":1618784456449},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1618784456613},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/postcss-loader/src/index.js","mtime":1618784456604},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/cache-loader/dist/cjs.js","mtime":1618784450087},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/vue-loader/lib/index.js","mtime":1618784456613}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRhYmxlIHsKICBjb2xvcjogd2hpdGU7Cn0KCi5jZWxsLS10b3RhbCB7CiAgZm9udC13ZWlnaHQ6IDYwMDsKICBjb2xvcjogI2YwYWMxMjsKfQoKZGl2LmRlZXAtZHJpbGwgewogIG1hcmdpbi10b3A6IDIwcHg7Cn0KCi5kZWVwLWRyaWxsID4gaDMgewogIGJvcmRlci1ib3R0b206IDNweCBkb3R0ZWQgI2YwYWMxMjsKfQoKLmxpc3QtZ3JvdXAtaXRlbSB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzMyMzIzNjsKICBjb2xvcjogd2hpdGU7CiAgYm9yZGVyOiAycHggZGFzaGVkIHdoaXRlICFpbXBvcnRhbnQ7CiAgbWFyZ2luOiA1cHg7CiAgcGFkZGluZzogMTJweDsKfQoK"},{"version":3,"sources":["MosaicChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+MA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MosaicChart.vue","sourceRoot":"src/components","sourcesContent":["\n<template>\n \n        <div class=\"container-fluid\">\n          <div class=\"row\">\n            <div class=\"col-md-10\">\n              <div id=\"chart\" ref=\"chartContainer\"></div>\n            </div>\n            <div class=\"col-md-2\">\n              <div class=\"deep-drill\">\n                <h3>Deep-drill into:</h3>\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\">Opportunities</li>\n                  <li class=\"list-group-item\">Closed win</li>\n                  <li class=\"list-group-item\">Closed lost</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-11\">\n              <table class=\"table table-borderless\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th v-for=\"h in tableHeader\" :key= \"h\" class=\"text-end\">\n                      {{ h }}\n                    </th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"(values, key) in tableData\" :key=\"key\" class=\"text-end\">\n                    <td class=\"text-start\">{{ getKey(key) }}</td>\n                    <td v-for=\"(value, i) in values\" :key=\"`${i}_${value}`\">{{ key === 'numberOfDeals' ? value : `€${value}` }}</td>\n                    <td class=\"cell--total\">{{ key === 'numberOfDeals' ? summedValues(values, key): `€${summedValues(values, key)}` }}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n    \n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\n\n\nexport default {\n  name: \"mosaic\",\n  data: function () {\n    return {\n      tableHeader: [\n        \"Qualified\",\n        \"Meeting Scheduled\",\n        \"Offer\",\n        \"Negotiation\",\n        \"Closed win\"\n      ],\n      tableData: {\n        numberOfDeals: [\n          4,3,5,5,5\n        ],\n        weightedDealValue: [\n          20000, 30000,60000,  70000, 60000\n        ],\n        averageDealSize: [\n          30000, 25000, 20000, 20000, 20000\n        ]\n      }\n    }\n  },\n  computed: {},\n  methods: {\n    summedValues(values, key) {\n      if(key === \"averageDealSize\") return _.mean(values);\n      return _.sum(values);\n    },\n    getKey(key) {\n      return _.upperFirst(_.lowerCase(key));\n    }\n  },\n  mounted() {\n    const chartContainer = this.$refs.chartContainer;\n    const width = chartContainer.clientWidth;\n    const height= 600;\n    const margin = {\n      top: 60,\n      bottom: 20,\n      left: 180\n    };\n    const fillColors= [ \"#f0ac12\", \"#a6a6a6\"];\n\n    d3.json(\"./assets/dummy.json\")\n      .then(data => {\n        window.d3 = d3;\n        const locale = d3.formatLocale({\n          decimal: '.',\n          thousands: ',',\n          grouping: [3],\n          currency: ['€', '']\n        })\n        const format = locale.format(\"$,\");\n        const fillColor = d => fillColors[d] || \"#3d3c3c\";\n        const strokeColor = d => d>1 ? \"#fff\" : \"#000\";\n        let xIndex;\n        let counter = 0;\n\n        const treemap = data => d3.treemap()\n              .round(true)\n              .tile(d3.treemapSliceDice)\n              .size([\n                width - margin.left,\n                height - margin.top - margin.bottom\n              ])(\n                d3.hierarchy(d3.group(data, d => d.type, d => d.subtype))\n                    .sum(d => d.value)\n                    .sort((a,b) => {\n                      const val = a.depth === 2 ? a.value - b.value : b.value - a.value;\n                      return val;\n\n                    })\n\n              ).each( d => {\n                if(d.x0 === xIndex) {\n                  counter++\n                } else {\n                  xIndex = d.x0;\n                  counter = 0\n                }\n                d.i = counter;\n                d.x0 += margin.left;\n                d.x1 += margin.left;\n                d.y0 += margin.top;\n                d.y1 += margin.top;\n              })\n\n              const root = treemap(data)\n\n              const svg = d3.create('svg')\n                    .attr('viewBox', [0,0, width, height])\n\n              const node = svg.selectAll('g')\n                              .data(root.descendants())\n                              .join('g')\n                              .attr('transform', d => `translate(${d.x0}, ${d.y0})`)\n\n              const column = node.filter(d => d.length === 1);\n\n              column.append('text')\n              .attr('x', d => {\n                return (d.x1 - d.x0) / 2\n              })\n              .attr('dy', '-0.8em')\n              .attr('fill', ' white')\n              .style('text-anchor', 'middle')\n              .text(d => format(d.value));\n\n              const cell = node.filter(d => d.depth === 2);\n\n               cell.append('rect')\n                .attr('fill', d => fillColor(d.parent.children.length - (d.i + 1)))\n                .attr('width', d => d.x1 - d.x0)\n                .attr('height', d => d.y1 - d.y0)\n                .attr('stroke', d => strokeColor(d.parent.children.length - (d.i + 1)));\n\n\n              cell.append('text')\n              .attr('x', d => (d.x1 - d.x0)/2)\n              .attr('y', d => (d.y1 - d.y0)/2)\n              .text(d=> d.data[0])\n              .attr('fill', d => strokeColor(d.parent.children.length - (d.i + 1)))\n              .style('text-anchor', 'middle')\n\n              var yScale = d3.scaleLinear()\n              .range([0, height - margin.top - margin.bottom]);\n\n              var ytick = svg.selectAll('.y')\n                .data(yScale.ticks(5))\n                .enter()\n                .append('g')\n                .attr('class', 'y')\n                .attr('transform', d => 'translate(' + margin.left +',' + (yScale(1 - d) + margin.top) + ')');\n    \n               ytick.append('text')\n                .attr('x', -8)\n                .attr('text-anchor', 'end')\n                .attr('dy', '.35em')\n                .attr('fill', 'white')\n                .text(d3.format('.0%'));\n              \n              d3.select(\"#chart\").append(() => svg.node())\n            \n      })\n\n  }\n\n}\n\n</script>\n\n\n<style>\n\n.table {\n  color: white;\n}\n\n.cell--total {\n  font-weight: 600;\n  color: #f0ac12;\n}\n\ndiv.deep-drill {\n  margin-top: 20px;\n}\n\n.deep-drill > h3 {\n  border-bottom: 3px dotted #f0ac12;\n}\n\n.list-group-item {\n  background-color: #323236;\n  color: white;\n  border: 2px dashed white !important;\n  margin: 5px;\n  padding: 12px;\n}\n\n</style>"]}]}