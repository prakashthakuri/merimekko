{"remainingRequest":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/babel-loader/lib/index.js!/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/src/components/MosaicChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/src/components/MosaicChart.vue","mtime":1618825775772},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/cache-loader/dist/cjs.js","mtime":1618784450087},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/babel-loader/lib/index.js","mtime":1618784450018},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/cache-loader/dist/cjs.js","mtime":1618784450087},{"path":"/Users/prakashthakuri/Documents/GitHub/Moasic-Chart/node_modules/vue-loader/lib/index.js","mtime":1618784456613}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJzsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJtb3NhaWMiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0YWJsZUhlYWRlcjogWyJRdWFsaWZpZWQiLCAiTWVldGluZyBTY2hlZHVsZWQiLCAiT2ZmZXIiLCAiTmVnb3RpYXRpb24iLCAiQ2xvc2VkIHdpbiJdLAogICAgICB0YWJsZURhdGE6IHsKICAgICAgICBudW1iZXJPZkRlYWxzOiBbNCwgMywgNSwgNSwgNV0sCiAgICAgICAgd2VpZ2h0ZWREZWFsVmFsdWU6IFsyMDAwMCwgMzAwMDAsIDYwMDAwLCA3MDAwMCwgNjAwMDBdLAogICAgICAgIGF2ZXJhZ2VEZWFsU2l6ZTogWzMwMDAwLCAyNTAwMCwgMjAwMDAsIDIwMDAwLCAyMDAwMF0KICAgICAgfQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7fSwKICBtZXRob2RzOiB7CiAgICBzdW1tZWRWYWx1ZXM6IGZ1bmN0aW9uIHN1bW1lZFZhbHVlcyh2YWx1ZXMsIGtleSkgewogICAgICBpZiAoa2V5ID09PSAiYXZlcmFnZURlYWxTaXplIikgcmV0dXJuIF8ubWVhbih2YWx1ZXMpOwogICAgICByZXR1cm4gXy5zdW0odmFsdWVzKTsKICAgIH0sCiAgICBnZXRLZXk6IGZ1bmN0aW9uIGdldEtleShrZXkpIHsKICAgICAgcmV0dXJuIF8udXBwZXJGaXJzdChfLmxvd2VyQ2FzZShrZXkpKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgY2hhcnRDb250YWluZXIgPSB0aGlzLiRyZWZzLmNoYXJ0Q29udGFpbmVyOwogICAgdmFyIHdpZHRoID0gY2hhcnRDb250YWluZXIuY2xpZW50V2lkdGg7CiAgICB2YXIgaGVpZ2h0ID0gNjAwOwogICAgdmFyIG1hcmdpbiA9IHsKICAgICAgdG9wOiA2MCwKICAgICAgYm90dG9tOiAyMCwKICAgICAgbGVmdDogMTgwCiAgICB9OwogICAgdmFyIGZpbGxDb2xvcnMgPSBbIiNmMGFjMTIiLCAiI2E2YTZhNiJdOwogICAgZDMuanNvbigiLi9hc3NldHMvZHVtbXkuanNvbiIpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgd2luZG93LmQzID0gZDM7CiAgICAgIHZhciBsb2NhbGUgPSBkMy5mb3JtYXRMb2NhbGUoewogICAgICAgIGRlY2ltYWw6ICcuJywKICAgICAgICB0aG91c2FuZHM6ICcsJywKICAgICAgICBncm91cGluZzogWzNdLAogICAgICAgIGN1cnJlbmN5OiBbJ+KCrCcsICcnXQogICAgICB9KTsKICAgICAgdmFyIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQoIiQsIik7CgogICAgICB2YXIgZmlsbENvbG9yID0gZnVuY3Rpb24gZmlsbENvbG9yKGQpIHsKICAgICAgICByZXR1cm4gZmlsbENvbG9yc1tkXSB8fCAiIzNkM2MzYyI7CiAgICAgIH07CgogICAgICB2YXIgc3Ryb2tlQ29sb3IgPSBmdW5jdGlvbiBzdHJva2VDb2xvcihkKSB7CiAgICAgICAgcmV0dXJuIGQgPiAxID8gIiNmZmYiIDogIiMwMDAiOwogICAgICB9OwoKICAgICAgdmFyIHhJbmRleDsKICAgICAgdmFyIGNvdW50ZXIgPSAwOwoKICAgICAgdmFyIHRyZWVtYXAgPSBmdW5jdGlvbiB0cmVlbWFwKGRhdGEpIHsKICAgICAgICByZXR1cm4gZDMudHJlZW1hcCgpLnJvdW5kKHRydWUpLnRpbGUoZDMudHJlZW1hcFNsaWNlRGljZSkuc2l6ZShbd2lkdGggLSBtYXJnaW4ubGVmdCwgaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b21dKShkMy5oaWVyYXJjaHkoZDMuZ3JvdXAoZGF0YSwgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkLnR5cGU7CiAgICAgICAgfSwgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkLnN1YnR5cGU7CiAgICAgICAgfSkpLnN1bShmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGQudmFsdWU7CiAgICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgdmFyIHZhbCA9IGEuZGVwdGggPT09IDIgPyBhLnZhbHVlIC0gYi52YWx1ZSA6IGIudmFsdWUgLSBhLnZhbHVlOwogICAgICAgICAgcmV0dXJuIHZhbDsKICAgICAgICB9KSkuZWFjaChmdW5jdGlvbiAoZCkgewogICAgICAgICAgaWYgKGQueDAgPT09IHhJbmRleCkgewogICAgICAgICAgICBjb3VudGVyKys7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB4SW5kZXggPSBkLngwOwogICAgICAgICAgICBjb3VudGVyID0gMDsKICAgICAgICAgIH0KCiAgICAgICAgICBkLmkgPSBjb3VudGVyOwogICAgICAgICAgZC54MCArPSBtYXJnaW4ubGVmdDsKICAgICAgICAgIGQueDEgKz0gbWFyZ2luLmxlZnQ7CiAgICAgICAgICBkLnkwICs9IG1hcmdpbi50b3A7CiAgICAgICAgICBkLnkxICs9IG1hcmdpbi50b3A7CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICB2YXIgcm9vdCA9IHRyZWVtYXAoZGF0YSk7CiAgICAgIHZhciBzdmcgPSBkMy5jcmVhdGUoJ3N2ZycpLmF0dHIoJ3ZpZXdCb3gnLCBbMCwgMCwgd2lkdGgsIGhlaWdodF0pOwogICAgICB2YXIgbm9kZSA9IHN2Zy5zZWxlY3RBbGwoJ2cnKS5kYXRhKHJvb3QuZGVzY2VuZGFudHMoKSkuam9pbignZycpLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuICJ0cmFuc2xhdGUoIi5jb25jYXQoZC54MCwgIiwgIikuY29uY2F0KGQueTAsICIpIik7CiAgICAgIH0pOwogICAgICB2YXIgY29sdW1uID0gbm9kZS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5sZW5ndGggPT09IDE7CiAgICAgIH0pOwogICAgICBjb2x1bW4uYXBwZW5kKCd0ZXh0JykuYXR0cigneCcsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIChkLngxIC0gZC54MCkgLyAyOwogICAgICB9KS5hdHRyKCdkeScsICctMC44ZW0nKS5hdHRyKCdmaWxsJywgJyB3aGl0ZScpLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKS50ZXh0KGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGZvcm1hdChkLnZhbHVlKTsKICAgICAgfSk7CiAgICAgIHZhciBjZWxsID0gbm9kZS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5kZXB0aCA9PT0gMjsKICAgICAgfSk7CiAgICAgIGNlbGwuYXBwZW5kKCdyZWN0JykuYXR0cignZmlsbCcsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGZpbGxDb2xvcihkLnBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAoZC5pICsgMSkpOwogICAgICB9KS5hdHRyKCd3aWR0aCcsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIGQueDEgLSBkLngwOwogICAgICB9KS5hdHRyKCdoZWlnaHQnLCBmdW5jdGlvbiAoZCkgewogICAgICAgIHJldHVybiBkLnkxIC0gZC55MDsKICAgICAgfSkuYXR0cignc3Ryb2tlJywgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gc3Ryb2tlQ29sb3IoZC5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gKGQuaSArIDEpKTsKICAgICAgfSk7CiAgICAgIGNlbGwuYXBwZW5kKCd0ZXh0JykuYXR0cigneCcsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgcmV0dXJuIChkLngxIC0gZC54MCkgLyAyOwogICAgICB9KS5hdHRyKCd5JywgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gKGQueTEgLSBkLnkwKSAvIDI7CiAgICAgIH0pLnRleHQoZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gZC5kYXRhWzBdOwogICAgICB9KS5hdHRyKCdmaWxsJywgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gc3Ryb2tlQ29sb3IoZC5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gKGQuaSArIDEpKTsKICAgICAgfSkuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpOwogICAgICB2YXIgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbMCwgaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b21dKTsKICAgICAgdmFyIHl0aWNrID0gc3ZnLnNlbGVjdEFsbCgnLnknKS5kYXRhKHlTY2FsZS50aWNrcyg1KSkuZW50ZXIoKS5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICd5JykuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24gKGQpIHsKICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgbWFyZ2luLmxlZnQgKyAnLCcgKyAoeVNjYWxlKDEgLSBkKSArIG1hcmdpbi50b3ApICsgJyknOwogICAgICB9KTsKICAgICAgeXRpY2suYXBwZW5kKCd0ZXh0JykuYXR0cigneCcsIC04KS5hdHRyKCd0ZXh0LWFuY2hvcicsICdlbmQnKS5hdHRyKCdkeScsICcuMzVlbScpLmF0dHIoJ2ZpbGwnLCAnd2hpdGUnKS50ZXh0KGQzLmZvcm1hdCgnLjAlJykpOwogICAgICBkMy5zZWxlY3QoIiNjaGFydCIpLmFwcGVuZChmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHN2Zy5ub2RlKCk7CiAgICAgIH0pOwogICAgfSk7CiAgfQp9Ow=="},{"version":3,"sources":["MosaicChart.vue"],"names":[],"mappings":"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","sourcesContent":["\n<template>\n \n        <div class=\"container-fluid\">\n          <div class=\"row\">\n            <div class=\"col-md-10\">\n              <div id=\"chart\" ref=\"chartContainer\"></div>\n            </div>\n            <div class=\"col-md-2\">\n              <div class=\"deep-drill\">\n                <h3>Deep-drill into:</h3>\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\">Opportunities</li>\n                  <li class=\"list-group-item\">Closed win</li>\n                  <li class=\"list-group-item\">Closed lost</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-11\">\n              <table class=\"table table-borderless\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th v-for=\"h in tableHeader\" :key= \"h\" class=\"text-end\">\n                      {{ h }}\n                    </th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"(values, key) in tableData\" :key=\"key\" class=\"text-end\">\n                    <td class=\"text-start\">{{ getKey(key) }}</td>\n                    <td v-for=\"(value, i) in values\" :key=\"`${i}_${value}`\">{{ key === 'numberOfDeals' ? value : `€${value}` }}</td>\n                    <td class=\"cell--total\">{{ key === 'numberOfDeals' ? summedValues(values, key): `€${summedValues(values, key)}` }}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n    \n</template>\n\n<script>\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\n\n\nexport default {\n  name: \"mosaic\",\n  data: function () {\n    return {\n      tableHeader: [\n        \"Qualified\",\n        \"Meeting Scheduled\",\n        \"Offer\",\n        \"Negotiation\",\n        \"Closed win\"\n      ],\n      tableData: {\n        numberOfDeals: [\n          4,3,5,5,5\n        ],\n        weightedDealValue: [\n          20000, 30000,60000,  70000, 60000\n        ],\n        averageDealSize: [\n          30000, 25000, 20000, 20000, 20000\n        ]\n      }\n    }\n  },\n  computed: {},\n  methods: {\n    summedValues(values, key) {\n      if(key === \"averageDealSize\") return _.mean(values);\n      return _.sum(values);\n    },\n    getKey(key) {\n      return _.upperFirst(_.lowerCase(key));\n    }\n  },\n  mounted() {\n    const chartContainer = this.$refs.chartContainer;\n    const width = chartContainer.clientWidth;\n    const height= 600;\n    const margin = {\n      top: 60,\n      bottom: 20,\n      left: 180\n    };\n    const fillColors= [ \"#f0ac12\", \"#a6a6a6\"];\n\n    d3.json(\"./assets/dummy.json\")\n      .then(data => {\n        window.d3 = d3;\n        const locale = d3.formatLocale({\n          decimal: '.',\n          thousands: ',',\n          grouping: [3],\n          currency: ['€', '']\n        })\n        const format = locale.format(\"$,\");\n        const fillColor = d => fillColors[d] || \"#3d3c3c\";\n        const strokeColor = d => d>1 ? \"#fff\" : \"#000\";\n        let xIndex;\n        let counter = 0;\n\n        const treemap = data => d3.treemap()\n              .round(true)\n              .tile(d3.treemapSliceDice)\n              .size([\n                width - margin.left,\n                height - margin.top - margin.bottom\n              ])(\n                d3.hierarchy(d3.group(data, d => d.type, d => d.subtype))\n                    .sum(d => d.value)\n                    .sort((a,b) => {\n                      const val = a.depth === 2 ? a.value - b.value : b.value - a.value;\n                      return val;\n\n                    })\n\n              ).each( d => {\n                if(d.x0 === xIndex) {\n                  counter++\n                } else {\n                  xIndex = d.x0;\n                  counter = 0\n                }\n                d.i = counter;\n                d.x0 += margin.left;\n                d.x1 += margin.left;\n                d.y0 += margin.top;\n                d.y1 += margin.top;\n              })\n\n              const root = treemap(data)\n\n              const svg = d3.create('svg')\n                    .attr('viewBox', [0,0, width, height])\n\n              const node = svg.selectAll('g')\n                              .data(root.descendants())\n                              .join('g')\n                              .attr('transform', d => `translate(${d.x0}, ${d.y0})`)\n\n              const column = node.filter(d => d.length === 1);\n\n              column.append('text')\n              .attr('x', d => {\n                return (d.x1 - d.x0) / 2\n              })\n              .attr('dy', '-0.8em')\n              .attr('fill', ' white')\n              .style('text-anchor', 'middle')\n              .text(d => format(d.value));\n\n              const cell = node.filter(d => d.depth === 2);\n\n               cell.append('rect')\n                .attr('fill', d => fillColor(d.parent.children.length - (d.i + 1)))\n                .attr('width', d => d.x1 - d.x0)\n                .attr('height', d => d.y1 - d.y0)\n                .attr('stroke', d => strokeColor(d.parent.children.length - (d.i + 1)));\n\n\n              cell.append('text')\n              .attr('x', d => (d.x1 - d.x0)/2)\n              .attr('y', d => (d.y1 - d.y0)/2)\n              .text(d=> d.data[0])\n              .attr('fill', d => strokeColor(d.parent.children.length - (d.i + 1)))\n              .style('text-anchor', 'middle')\n\n              var yScale = d3.scaleLinear()\n              .range([0, height - margin.top - margin.bottom]);\n\n              var ytick = svg.selectAll('.y')\n                .data(yScale.ticks(5))\n                .enter()\n                .append('g')\n                .attr('class', 'y')\n                .attr('transform', d => 'translate(' + margin.left +',' + (yScale(1 - d) + margin.top) + ')');\n    \n               ytick.append('text')\n                .attr('x', -8)\n                .attr('text-anchor', 'end')\n                .attr('dy', '.35em')\n                .attr('fill', 'white')\n                .text(d3.format('.0%'));\n              \n              d3.select(\"#chart\").append(() => svg.node())\n            \n      })\n\n  }\n\n}\n\n</script>\n\n\n<style>\n\n.table {\n  color: white;\n}\n\n.cell--total {\n  font-weight: 600;\n  color: #f0ac12;\n}\n\ndiv.deep-drill {\n  margin-top: 20px;\n}\n\n.deep-drill > h3 {\n  border-bottom: 3px dotted #f0ac12;\n}\n\n.list-group-item {\n  background-color: #323236;\n  color: white;\n  border: 2px dashed white !important;\n  margin: 5px;\n  padding: 12px;\n}\n\n</style>"],"sourceRoot":"src/components"}]}